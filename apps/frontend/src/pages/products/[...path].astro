---
import Layout from '@/layouts/Layout.astro';
import Category from '@/models/Category';
import BreadCrumb from '@/components/Products/BreadCrumb.astro';
import mongoose from 'mongoose';
import { priceRange } from 'const/price';
import Product from '@/models/Product';
import Attribute from '@/models/Attribute';
import ProductCard from '@/components/common/ProductCard.astro';
import UpperFilters from '@/components/Products/UpperFilters.astro';
import Pagination from '@/components/Products/Pagination.astro';
import Filters from '@/components/Products/Filters/Index.astro';
import { VariantUnwindedProductType } from '@/common/types';
import { populateVariantsAttributes } from '@/utils/pipeline';
import YoutubeVideo from '@/components/common/YoutubeVideo.astro';
import { marked } from 'marked';

let props = Astro.params;
let paths = props.path?.split('/') || [];

let categories = await Category.find(
  {},
  'name youtubeLink description parentId attributeType',
).catch((error) => {
  console.error('Error fetching categories:', error);
  return [];
});

let category_id = [];
let children_categories = [];

try {
  for (let i = 0; i < paths.length; i++) {
    category_id[i] = categories.find((category) => {
      return (
        category.name === paths[i] &&
        (i === 0 ||
          category.parentId.toString() === category_id[i - 1]?._id.toString())
      );
    });

    if (category_id.length > 0) {
      const parentId = category_id[category_id.length - 1]?._id.toString();
      children_categories = categories.filter((category) => {
        return category.parentId === parentId;
      });
    }
  }
} catch (error) {
  console.error('Error fetching categories:', error);
}

let page = parseInt(Astro.url.searchParams.get('page') || '1');
let limit = parseInt(Astro.url.searchParams.get('limit') || '50');
const skip = Number((page - 1) * limit);

const category = category_id[0]?._id;
const subCategory = category_id[1]?._id;
const leafCategory = category_id[2]?._id;

// .....................MATCH STAGE.....................
const matchStage: any = {};
//category
if (category) {
  matchStage['category'] = new mongoose.Types.ObjectId(category);
}
if (subCategory) {
  matchStage['subCategory'] = new mongoose.Types.ObjectId(subCategory);
}
if (leafCategory) {
  matchStage['leafCategory'] = new mongoose.Types.ObjectId(leafCategory);
}

//stock
const stock = Astro.url.searchParams.get('stock');

// filter_price
let filter_price = Astro.url.searchParams.get('filter_price');
let minToMax = filter_price ? filter_price.split('-') : [];
let minPrice = priceRange.min;
let maxPrice = priceRange.max;
if (minToMax.length === 2) {
  minPrice = parseInt(minToMax[0]);
  maxPrice = parseInt(minToMax[1]);
  if (isNaN(minPrice) || isNaN(maxPrice)) {
    throw new Error('Invalid price range values');
  }
} else if (minToMax.length === 1) {
  minPrice = parseInt(minToMax[0]);

  if (isNaN(minPrice)) {
    throw new Error('Invalid price range value');
  }
} else if (minToMax.length > 2) {
  throw new Error('Too many values in price range');
}

//sort
let sort = Astro.url.searchParams.get('sort') ?? '';
let sortStage = {};
if (sort) {
  if (sort === 'price') {
    sortStage = { price: 1 };
  } else if (sort === '-price') {
    sortStage = { price: -1 };
  } else if (sort === 'salePrice') {
    sortStage = { salePrice: 1 };
  } else if (sort === '-salePrice') {
    sortStage = { salePrice: -1 };
  }
} else {
  sortStage = { createdAt: -1 };
}

//filters: [ '6649caea3f8105432dda36f6', '6649cb0c3f8105432dda3ab6' ]
const attributes = await Attribute.find({
  $or: [
    { category_id: category },
    { category_id: subCategory },
    { category_id: leafCategory },
  ],
});
let filter = Astro.url.searchParams;
const filters = filter.get('filter')?.split('_') ?? [];

let filtersFilter = () => {
  if (filters.length === 0) {
    return [];
  }
  return [
    {
      $addFields: {
        attributes_array: { $objectToArray: '$attributes' },
      },
    },
    {
      $addFields: {
        attributes_array: {
          $reduce: {
            input: '$attributes_array',
            initialValue: [],
            in: { $concatArrays: ['$$value', '$$this.v'] },
          },
        },
      },
    },
    {
      $match: {
        attributes_array: { $all: filters }, // Match documents where all elements in filters are in attributes_array
      },
    },
  ];
};

// Fetch data from the database
const data = await Product.aggregate([
  {
    $match: {
      isPublished: {
        $ne: false,
      },
    },
  },
  ...populateVariantsAttributes(),
  {
    $project: {
      name: 1,
      slug: 1,
      images: 1,
      category: 1,
      subCategory: 1,
      leafCategory: 1,
      price: 1,
      salePrice: 1,
      isHomeDeliveryFree: 1,
      status: 1,
      hasVariants: 1,
      variants: 1,
      attributes: 1,
      variantsAttributes: 1,
    },
  },
  {
    $match: matchStage,
  },

  ...filtersFilter(),

  // ...productFacet(minPrice, maxPrice),

  {
    $sort: sortStage,
  },

  {
    $facet: {
      docs: [{ $skip: skip }, { $limit: limit }],
      totalDocs: [
        {
          $count: 'createdAt',
        },
      ],
    },
  },
  {
    $project: {
      docs: 1,
      totalPages: {
        $ceil: {
          $divide: [{ $first: '$totalDocs.createdAt' }, limit],
        },
      },
      totalDocs: { $first: '$totalDocs.createdAt' },
    },
  },
  {
    $addFields: {
      page: page,
      limit: limit,
    },
  },
]).catch((error) => {
  console.error('Error fetching products:', error);
  return [];
});

let products: VariantUnwindedProductType[] = data?.[0]?.docs ?? [];

let youtubeLink = category_id[0]?.youtubeLink;
let description = category_id[0]?.description
  ? marked.parse(category_id[0]?.description)
  : null;
console.log('ðŸš€ ~ description:', description);
---

<Layout title="Products page" header="Products">
  <div class="container">
    <br />

    <BreadCrumb
      children_categories={children_categories}
      paths={paths}
      categories={category}
    />

    {
      description && (
        <div class="prose mt-2 dark:prose-invert" set:html={description} />
      )
    }

    <div class="max-w-[800px]">
      {category_id[0]?.youtubeLink && <YoutubeVideo link={youtubeLink} />}
    </div>

    <div class="sticky top-60 mt-4">
      <div class="gid-cols-1 grid lg:grid-cols-12 lg:gap-6">
        <div class="col-span-1 lg:col-span-2">
          <div
            class="col-span-1 hidden h-fit w-full flex-col items-start justify-start lg:col-span-3 lg:flex"
          >
            <Filters
              key="mobile"
              categories={categories}
              category={category}
              subCategory={subCategory}
              leafCategory={leafCategory}
            />
          </div>
        </div>
        <div class="col-span-1 h-fit w-full lg:col-span-10">
          <UpperFilters limit={limit} sort={sort}>
            <Filters
              categories={categories}
              category={category}
              subCategory={subCategory}
              leafCategory={leafCategory}
            />
          </UpperFilters>

          <!-- Products -->
          <div class="mt-5 grid grid-cols-2 gap-3 md:grid-cols-3 md:gap-3">
            <!-- <div class="col-span-2">
              {
                category_id[0]?.youtubeLink && (
                  <YoutubeVideo link={youtubeLink} />
                )
              }
            </div> -->
            {
              products.length > 0 &&
                products.map((product, index) => (
                  <ProductCard
                    key={'productofProductPage'}
                    product={{
                      _id: product._id,
                      name: product.name,
                      slug: product.slug,
                      images: product.images,
                      price: product.price,
                      status: product.status,
                      salePrice: product.salePrice,
                      isHomeDeliveryFree: product.isHomeDeliveryFree,
                      variants: product.variants,
                      hasVariants: product.hasVariants,
                      variantsAttributes: product.variantsAttributes,
                    }}
                  />
                ))
            }
          </div>
          <div class="mt-4 w-full">
            <Pagination
              totalPages={data[0]?.totalPages}
              totalDocs={data[0]?.totalDocs}
              page={page}
              limit={limit}
            />
          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>
